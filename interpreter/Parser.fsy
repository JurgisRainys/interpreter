%{
	open interpreter.AST
%}

%start start

%token INT
%token STR
%token BOOL
%token <string> IDENTIFIER
%token <string> STRING
%token <int> NUMBER
%token THEN
%token ELSE
%token IF
%token WHILE
%token FUN
%token RETURN
%token TRUE
%token FALSE
%token PRINT
%token NOT_EQUAL
%token EQUALS
%token LOGICAL_OR
%token LOGICAL_AND
%token LESS_THAN
%token MORE_THAN
%token ADD
%token SUBTRACT
%token DIVIDE
%token MULTIPLY
%token COMMA
%token OPEN_BLOCK
%token CLOSE_BLOCK
%token LEFT_PARENS
%token RIGHT_PARENS
%token SEMICOLON
%token ASSIGNMENT
%token EOF

%type <interpreter.Vartype option> start

%%

start: prog { $1 }

prog:
	| EOF { None }
	| statement { Some $1 }

statement:
	//| vartype IDENTIFIER ASSIGNMENT STRING { NewAssignment $1 $2 $4 }
	| vartype { Vartype $1 }

vartype:
	| INT	{ Int }
	| STR	{ Str }
	| BOOL	{ Bool }



