
FUN INT fibRecursive(INT n) ->
    FUN INT recursive(INT n, INT current, INT previous) ->
        INT result = current;

        IF (n > :zero) THEN ->
            result = recursive(n - :one, current + previous, current);
        <-
        
        RETURN result;
    <-

    INT result = -:one;

    IF (n > :zero) THEN ->
        IF (n == :one) THEN -> result = :zero; <-
        ELSE -> 
            IF (n == :two) THEN -> result = :one; <-
            ELSE -> result = recursive(n - :two, :one, :zero); <-
        <-
    <-

    RETURN result;
<-

FUN INT fibLoop(INT n) ->
    INT result = -:one;

    IF (n == :one) THEN -> result = :zero; <-
    ELSE -> 
        IF (n == :two) THEN -> result = :one; <-
        ELSE -> 
            n = n - :one;
            INT previous = :zero;
            INT current = :one;
            WHILE (n > :zero) ->
                result = current;

                INT temp = previous;
                previous = current;
                current = current + temp;
                n = n - :one;
            <-
        <-
    <-
    RETURN result;
<-

INT fibNum1 = fibRecursive(:one:zero);
INT fibNum2 = fibLoop(:one:zero);

PRINT "10 fibonacio skaicius apskaiciuotas rekursyviai: ";
PRINTLN fibNum1;

PRINT "10 fibonacio skaicius apskaiciuotas su ciklu: ";
PRINTLN fibNum2;

FILE OVERWRITE "results.txt" PRINT "10 fibonacio skaicius apskaiciuotas rekursyviai: ";
FILE "results.txt" PRINTLN fibNum1;

FILE "results.txt" PRINT "10 fibonacio skaicius apskaiciuotas su ciklu: ";
FILE "results.txt" PRINTLN fibNum2;


/*

PRINT "previous and current: ";
PRINT previous;
PRINT " ";
PRINTLN current;

FUN INT fib(INT n) ->
    INT t = :one;
    FUN INT recursive(INT n, INT current, INT previous) ->
        INT toReturn = current;

        IF (n > :zero) THEN ->
            toReturn = current + recursive(n - :one, current + previous, current);
        <-

        RETURN toReturn;
    <-

    RETURN recursive(n - :two, :one, :zero); 
<-

INT XX = fib(:four);

PRINT "5 fib skaicius = ";
PRINTLN XX;

INT c = :one:two:three;
INT x2 = (:one + c) + (:three + :four);
INT cond = :zero;

IF (c > x2) THEN ->
    cond = :one;
<- ELSE ->
    cond = :two;
<-

INT X = :zero;

WHILE (X < :five) ->
    X = X + :one;
<-


INT X = :zero;

PRINT "X = ";
PRINTLN X;

WHILE (X < :five) ->
    X = X + :one;
<-

PRINT "X = ";
PRINTLN X;


STR x = id("x", (("d" ++ "s") ++ "s"));

IF (TRUE OR FALSE) THEN ->
    xd = "SSSSS" ++ "xxddd";
    XXD = :one;
    IF (TRUE OR FALSE) THEN ->
        xd = "SSSSS" ++ "xxddd";
        XXD = :one;
        
    <- ELSE ->
        xd = "SSSSS" - "xxddd";
    <-
<- ELSE -> xd = "SSSSS" - "xxddd"; <-

WHILE (TRUE) ->
    STR SSSFFFF = "SF";
<-

FUN STR funcXD (INT i) ->   PRINT XD; RETURN :one; <-
FUN STR funcXD (INT i2, STR SSSSSSS) ->   PRINT XD; RETURN SSSSSSS;<-


INT xd = (-:zero:one:two:three:zero:one + :one) + (:two + :two);

BOOL x2d = TRUE OR FALSE;
xd = "SSSSS" - "xxddd";

IF (TRUE OR FALSE) THEN ->
    xd = "SSSSS" - "xxddd";
<- ELSE ->
    xd = "SSSSS" - "xxddd";
<-

WHILE (a > :four) ->
    a = a - :one;
<-

PRINT XD;
PRINT "LOL";

FUN funcXD (INT i, BOOL b) ->   
    PRINT XD;
    RETURN;
    <-

FUN funcXD (INT i) ->   PRINT XD; RETURN <-
FUN funcXD (INT i2, STR SSSSSSS) ->   PRINT XD; RETURN SSSSSSS;<-
*/