{

module Lexer

open Microsoft.FSharp.Text.Lexing
open System
open Parser
exception SyntaxError of string

let lexeme = LexBuffer.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

let whitespace = [' ' '\t' ]+
let newline = '\n' | '\r' | "\r\n"
//let numbers = (-|\+)?(:zero|:one|:two|:three|:four|:five|:six|:seven|:eight|:nine)+
let identifierChar = ['A'-'Z' ' ' '-']
let identifier     = identifierChar+'.'

rule tokens = 
	parse
	| space			{ tokens lexbuf }
	| newline		{ newline lexbuf; tokens lexbuf }
	| "INT"			{ INT }
	| "STR"			{ STR }
	| "BOOL"		{ BOOL }
	
	//| (numbers)	{ NUMBER (int (lexeme lexbuf)) }
	| '"'			{ read_string "" false lexbuf }
	//| bool
	| identifier	{ IDENTIFIER (string (lexeme lexbuf)) }

	| "THEN"		{ THEN }
	| "ELSE"		{ ELSE }
	| "IF"			{ IF }
	| "WHILE"		{ WHILE }
	| "FUN"			{ FUN }
	| "RETURN"		{ RETURN }
	| "PRINT"		{ PRINT }
	| "TRUE"		{ TRUE }
	| "FALSE"		{ FALSE }

	| "!="			{ NOT_EQUAL }
	| "=="			{ EQUALS }
	| "OR"			{ LOGICAL_OR }
	| "AND"			{ LOGICAL_AND }
	| '<'			{ LESS_THAN }
	| '>'			{ MORE_THAN }

	| '+'			{ ADD }
	| '-'			{ SUBTRACT }
	| '/'			{ DIVIDE }
	| '*'			{ MULTIPLY }

	| ","			{ COMMA }
	| "->"			{ OPEN_BLOCK }
	| "<-"			{ CLOSE_BLOCK }
	| '('			{ LEFT_PARENS }
	| ')'			{ RIGHT_PARENS }
	| ';'			{ SEMICOLON }
	| '='			{ ASSIGNMENT }

	| eof			{ EOF }
	| _				{ raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }

//and extractString
and read_string str ignorequote =
  parse
  | '"'           { if ignorequote  then (read_string (str+"\\\"") false lexbuf) else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str+(lexeme lexbuf)) false lexbuf }
  | eof           { raise (Exception ("String is not terminated")) }
