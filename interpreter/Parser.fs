// Implementation file for parser generated by fsyacc

[<System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute>]
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "program-logic/lexer-parser-rules/Parser.fsy"

    open interpreter.AST
    open System

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | ASSIGNMENT
  | SEMICOLON
  | RIGHT_PARENS
  | LEFT_PARENS
  | CLOSE_BLOCK
  | OPEN_BLOCK
  | COMMA
  | MULTIPLY
  | DIVIDE
  | SUBTRACT
  | APPEND
  | ADD
  | MORE_THAN
  | LESS_THAN
  | LOGICAL_AND
  | LOGICAL_OR
  | EQUALS
  | NOT_EQUAL
  | CLOSE
  | OPEN
  | OVERWRITE
  | FILE
  | PRINTLN
  | PRINT
  | RETURN
  | FUN
  | WHILE
  | IF
  | ELSE
  | THEN
  | BOOLEAN of (bool)
  | NUMBER of (int)
  | STRING of (string)
  | IDENTIFIER of (string)
  | BOOL
  | STR
  | INT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ASSIGNMENT
    | TOKEN_SEMICOLON
    | TOKEN_RIGHT_PARENS
    | TOKEN_LEFT_PARENS
    | TOKEN_CLOSE_BLOCK
    | TOKEN_OPEN_BLOCK
    | TOKEN_COMMA
    | TOKEN_MULTIPLY
    | TOKEN_DIVIDE
    | TOKEN_SUBTRACT
    | TOKEN_APPEND
    | TOKEN_ADD
    | TOKEN_MORE_THAN
    | TOKEN_LESS_THAN
    | TOKEN_LOGICAL_AND
    | TOKEN_LOGICAL_OR
    | TOKEN_EQUALS
    | TOKEN_NOT_EQUAL
    | TOKEN_CLOSE
    | TOKEN_OPEN
    | TOKEN_OVERWRITE
    | TOKEN_FILE
    | TOKEN_PRINTLN
    | TOKEN_PRINT
    | TOKEN_RETURN
    | TOKEN_FUN
    | TOKEN_WHILE
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_BOOLEAN
    | TOKEN_NUMBER
    | TOKEN_STRING
    | TOKEN_IDENTIFIER
    | TOKEN_BOOL
    | TOKEN_STR
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_statements
    | NONTERM_statement
    | NONTERM_newVarAssignment
    | NONTERM_existingVarAssignment
    | NONTERM_ifCond
    | NONTERM_whileLoop
    | NONTERM_printFile
    | NONTERM_printConsole
    | NONTERM_printType
    | NONTERM_print
    | NONTERM_text
    | NONTERM_funArg
    | NONTERM_funArgs
    | NONTERM_funArgsInParens
    | NONTERM_func
    | NONTERM_returnS
    | NONTERM_vartype
    | NONTERM_expression
    | NONTERM_expressionInParens
    | NONTERM_value
    | NONTERM_operator
    | NONTERM_operation
    | NONTERM_funcCallArgs
    | NONTERM_funcCallArgsInParens
    | NONTERM_functionCall

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | ASSIGNMENT  -> 1 
  | SEMICOLON  -> 2 
  | RIGHT_PARENS  -> 3 
  | LEFT_PARENS  -> 4 
  | CLOSE_BLOCK  -> 5 
  | OPEN_BLOCK  -> 6 
  | COMMA  -> 7 
  | MULTIPLY  -> 8 
  | DIVIDE  -> 9 
  | SUBTRACT  -> 10 
  | APPEND  -> 11 
  | ADD  -> 12 
  | MORE_THAN  -> 13 
  | LESS_THAN  -> 14 
  | LOGICAL_AND  -> 15 
  | LOGICAL_OR  -> 16 
  | EQUALS  -> 17 
  | NOT_EQUAL  -> 18 
  | CLOSE  -> 19 
  | OPEN  -> 20 
  | OVERWRITE  -> 21 
  | FILE  -> 22 
  | PRINTLN  -> 23 
  | PRINT  -> 24 
  | RETURN  -> 25 
  | FUN  -> 26 
  | WHILE  -> 27 
  | IF  -> 28 
  | ELSE  -> 29 
  | THEN  -> 30 
  | BOOLEAN _ -> 31 
  | NUMBER _ -> 32 
  | STRING _ -> 33 
  | IDENTIFIER _ -> 34 
  | BOOL  -> 35 
  | STR  -> 36 
  | INT  -> 37 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_ASSIGNMENT 
  | 2 -> TOKEN_SEMICOLON 
  | 3 -> TOKEN_RIGHT_PARENS 
  | 4 -> TOKEN_LEFT_PARENS 
  | 5 -> TOKEN_CLOSE_BLOCK 
  | 6 -> TOKEN_OPEN_BLOCK 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_MULTIPLY 
  | 9 -> TOKEN_DIVIDE 
  | 10 -> TOKEN_SUBTRACT 
  | 11 -> TOKEN_APPEND 
  | 12 -> TOKEN_ADD 
  | 13 -> TOKEN_MORE_THAN 
  | 14 -> TOKEN_LESS_THAN 
  | 15 -> TOKEN_LOGICAL_AND 
  | 16 -> TOKEN_LOGICAL_OR 
  | 17 -> TOKEN_EQUALS 
  | 18 -> TOKEN_NOT_EQUAL 
  | 19 -> TOKEN_CLOSE 
  | 20 -> TOKEN_OPEN 
  | 21 -> TOKEN_OVERWRITE 
  | 22 -> TOKEN_FILE 
  | 23 -> TOKEN_PRINTLN 
  | 24 -> TOKEN_PRINT 
  | 25 -> TOKEN_RETURN 
  | 26 -> TOKEN_FUN 
  | 27 -> TOKEN_WHILE 
  | 28 -> TOKEN_IF 
  | 29 -> TOKEN_ELSE 
  | 30 -> TOKEN_THEN 
  | 31 -> TOKEN_BOOLEAN 
  | 32 -> TOKEN_NUMBER 
  | 33 -> TOKEN_STRING 
  | 34 -> TOKEN_IDENTIFIER 
  | 35 -> TOKEN_BOOL 
  | 36 -> TOKEN_STR 
  | 37 -> TOKEN_INT 
  | 40 -> TOKEN_end_of_input
  | 38 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_statements 
    | 5 -> NONTERM_statements 
    | 6 -> NONTERM_statement 
    | 7 -> NONTERM_statement 
    | 8 -> NONTERM_statement 
    | 9 -> NONTERM_statement 
    | 10 -> NONTERM_statement 
    | 11 -> NONTERM_statement 
    | 12 -> NONTERM_newVarAssignment 
    | 13 -> NONTERM_existingVarAssignment 
    | 14 -> NONTERM_ifCond 
    | 15 -> NONTERM_ifCond 
    | 16 -> NONTERM_whileLoop 
    | 17 -> NONTERM_printFile 
    | 18 -> NONTERM_printFile 
    | 19 -> NONTERM_printConsole 
    | 20 -> NONTERM_printType 
    | 21 -> NONTERM_printType 
    | 22 -> NONTERM_print 
    | 23 -> NONTERM_print 
    | 24 -> NONTERM_text 
    | 25 -> NONTERM_text 
    | 26 -> NONTERM_text 
    | 27 -> NONTERM_text 
    | 28 -> NONTERM_funArg 
    | 29 -> NONTERM_funArgs 
    | 30 -> NONTERM_funArgs 
    | 31 -> NONTERM_funArgsInParens 
    | 32 -> NONTERM_funArgsInParens 
    | 33 -> NONTERM_func 
    | 34 -> NONTERM_func 
    | 35 -> NONTERM_returnS 
    | 36 -> NONTERM_returnS 
    | 37 -> NONTERM_vartype 
    | 38 -> NONTERM_vartype 
    | 39 -> NONTERM_vartype 
    | 40 -> NONTERM_expression 
    | 41 -> NONTERM_expression 
    | 42 -> NONTERM_expression 
    | 43 -> NONTERM_expression 
    | 44 -> NONTERM_expressionInParens 
    | 45 -> NONTERM_expressionInParens 
    | 46 -> NONTERM_value 
    | 47 -> NONTERM_value 
    | 48 -> NONTERM_value 
    | 49 -> NONTERM_operator 
    | 50 -> NONTERM_operator 
    | 51 -> NONTERM_operator 
    | 52 -> NONTERM_operator 
    | 53 -> NONTERM_operator 
    | 54 -> NONTERM_operator 
    | 55 -> NONTERM_operator 
    | 56 -> NONTERM_operator 
    | 57 -> NONTERM_operator 
    | 58 -> NONTERM_operator 
    | 59 -> NONTERM_operator 
    | 60 -> NONTERM_operation 
    | 61 -> NONTERM_funcCallArgs 
    | 62 -> NONTERM_funcCallArgs 
    | 63 -> NONTERM_funcCallArgsInParens 
    | 64 -> NONTERM_funcCallArgsInParens 
    | 65 -> NONTERM_functionCall 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 40 
let _fsyacc_tagOfErrorTerminal = 38

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | ASSIGNMENT  -> "ASSIGNMENT" 
  | SEMICOLON  -> "SEMICOLON" 
  | RIGHT_PARENS  -> "RIGHT_PARENS" 
  | LEFT_PARENS  -> "LEFT_PARENS" 
  | CLOSE_BLOCK  -> "CLOSE_BLOCK" 
  | OPEN_BLOCK  -> "OPEN_BLOCK" 
  | COMMA  -> "COMMA" 
  | MULTIPLY  -> "MULTIPLY" 
  | DIVIDE  -> "DIVIDE" 
  | SUBTRACT  -> "SUBTRACT" 
  | APPEND  -> "APPEND" 
  | ADD  -> "ADD" 
  | MORE_THAN  -> "MORE_THAN" 
  | LESS_THAN  -> "LESS_THAN" 
  | LOGICAL_AND  -> "LOGICAL_AND" 
  | LOGICAL_OR  -> "LOGICAL_OR" 
  | EQUALS  -> "EQUALS" 
  | NOT_EQUAL  -> "NOT_EQUAL" 
  | CLOSE  -> "CLOSE" 
  | OPEN  -> "OPEN" 
  | OVERWRITE  -> "OVERWRITE" 
  | FILE  -> "FILE" 
  | PRINTLN  -> "PRINTLN" 
  | PRINT  -> "PRINT" 
  | RETURN  -> "RETURN" 
  | FUN  -> "FUN" 
  | WHILE  -> "WHILE" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | THEN  -> "THEN" 
  | BOOLEAN _ -> "BOOLEAN" 
  | NUMBER _ -> "NUMBER" 
  | STRING _ -> "STRING" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | BOOL  -> "BOOL" 
  | STR  -> "STR" 
  | INT  -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | ASSIGNMENT  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | RIGHT_PARENS  -> (null : System.Object) 
  | LEFT_PARENS  -> (null : System.Object) 
  | CLOSE_BLOCK  -> (null : System.Object) 
  | OPEN_BLOCK  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MULTIPLY  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | SUBTRACT  -> (null : System.Object) 
  | APPEND  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | MORE_THAN  -> (null : System.Object) 
  | LESS_THAN  -> (null : System.Object) 
  | LOGICAL_AND  -> (null : System.Object) 
  | LOGICAL_OR  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | NOT_EQUAL  -> (null : System.Object) 
  | CLOSE  -> (null : System.Object) 
  | OPEN  -> (null : System.Object) 
  | OVERWRITE  -> (null : System.Object) 
  | FILE  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | BOOLEAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL  -> (null : System.Object) 
  | STR  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 6us; 65535us; 0us; 4us; 5us; 6us; 27us; 28us; 31us; 32us; 38us; 39us; 78us; 79us; 6us; 65535us; 0us; 5us; 5us; 5us; 27us; 5us; 31us; 5us; 38us; 5us; 78us; 5us; 6us; 65535us; 0us; 7us; 5us; 7us; 27us; 7us; 31us; 7us; 38us; 7us; 78us; 7us; 6us; 65535us; 0us; 8us; 5us; 8us; 27us; 8us; 31us; 8us; 38us; 8us; 78us; 8us; 6us; 65535us; 0us; 9us; 5us; 9us; 27us; 9us; 31us; 9us; 38us; 9us; 78us; 9us; 6us; 65535us; 0us; 10us; 5us; 10us; 27us; 10us; 31us; 10us; 38us; 10us; 78us; 10us; 6us; 65535us; 0us; 52us; 5us; 52us; 27us; 52us; 31us; 52us; 38us; 52us; 78us; 52us; 6us; 65535us; 0us; 53us; 5us; 53us; 27us; 53us; 31us; 53us; 38us; 53us; 78us; 53us; 8us; 65535us; 0us; 47us; 5us; 47us; 27us; 47us; 31us; 47us; 38us; 47us; 42us; 43us; 45us; 46us; 78us; 47us; 6us; 65535us; 0us; 11us; 5us; 11us; 27us; 11us; 31us; 11us; 38us; 11us; 78us; 11us; 2us; 65535us; 48us; 49us; 50us; 51us; 2us; 65535us; 68us; 67us; 70us; 67us; 2us; 65535us; 68us; 69us; 70us; 71us; 1us; 65535us; 76us; 77us; 6us; 65535us; 0us; 12us; 5us; 12us; 27us; 12us; 31us; 12us; 38us; 12us; 78us; 12us; 2us; 65535us; 78us; 82us; 79us; 80us; 9us; 65535us; 0us; 13us; 5us; 13us; 27us; 13us; 31us; 13us; 38us; 13us; 68us; 65us; 70us; 65us; 74us; 75us; 78us; 13us; 10us; 65535us; 15us; 16us; 19us; 20us; 23us; 24us; 35us; 36us; 84us; 89us; 85us; 86us; 98us; 99us; 120us; 101us; 121us; 102us; 123us; 102us; 10us; 65535us; 15us; 117us; 19us; 117us; 23us; 117us; 35us; 117us; 84us; 117us; 85us; 117us; 98us; 117us; 120us; 118us; 121us; 119us; 123us; 119us; 10us; 65535us; 15us; 94us; 19us; 94us; 23us; 94us; 35us; 94us; 84us; 94us; 85us; 94us; 98us; 94us; 120us; 94us; 121us; 94us; 123us; 94us; 3us; 65535us; 117us; 120us; 118us; 120us; 119us; 120us; 10us; 65535us; 15us; 95us; 19us; 95us; 23us; 95us; 35us; 95us; 84us; 95us; 85us; 95us; 98us; 95us; 120us; 95us; 121us; 95us; 123us; 95us; 2us; 65535us; 121us; 122us; 123us; 125us; 1us; 65535us; 96us; 127us; 10us; 65535us; 15us; 97us; 19us; 97us; 23us; 97us; 35us; 97us; 84us; 97us; 85us; 97us; 98us; 97us; 120us; 97us; 121us; 97us; 123us; 97us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 12us; 19us; 26us; 33us; 40us; 47us; 54us; 61us; 70us; 77us; 80us; 83us; 86us; 88us; 95us; 98us; 108us; 119us; 130us; 141us; 145us; 156us; 159us; 161us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 2us; 4us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 2us; 12us; 45us; 1us; 12us; 1us; 13us; 1us; 13us; 2us; 13us; 45us; 1us; 13us; 2us; 14us; 15us; 2us; 14us; 15us; 3us; 14us; 15us; 45us; 2us; 14us; 15us; 2us; 14us; 15us; 2us; 14us; 15us; 2us; 14us; 15us; 2us; 14us; 15us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 16us; 1us; 16us; 2us; 16us; 45us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 2us; 17us; 18us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 23us; 2us; 24us; 25us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 2us; 29us; 30us; 1us; 30us; 1us; 30us; 2us; 31us; 32us; 1us; 31us; 1us; 31us; 1us; 32us; 2us; 33us; 34us; 2us; 33us; 34us; 2us; 33us; 34us; 2us; 33us; 34us; 2us; 33us; 34us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 2us; 35us; 36us; 2us; 35us; 44us; 3us; 35us; 44us; 45us; 2us; 35us; 44us; 1us; 35us; 2us; 36us; 45us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 2us; 42us; 65us; 1us; 43us; 1us; 44us; 2us; 44us; 45us; 1us; 44us; 1us; 45us; 2us; 45us; 62us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 2us; 60us; 60us; 2us; 60us; 61us; 1us; 60us; 1us; 62us; 1us; 62us; 2us; 63us; 64us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 65us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 36us; 38us; 40us; 42us; 45us; 47us; 50us; 53us; 57us; 60us; 63us; 66us; 69us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 87us; 89us; 91us; 93us; 95us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; 122us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 152us; 154us; 156us; 159us; 161us; 163us; 165us; 168us; 171us; 174us; 177us; 180us; 182us; 184us; 186us; 188us; 190us; 193us; 196us; 200us; 203us; 205us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 223us; 225us; 227us; 230us; 232us; 234us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 270us; 273us; 275us; 277us; 279us; 282us; 284us; 286us; 288us; |]
let _fsyacc_action_rows = 128
let _fsyacc_actionTableElements = [|11us; 32768us; 0us; 3us; 22us; 41us; 23us; 50us; 24us; 48us; 26us; 74us; 27us; 34us; 28us; 22us; 34us; 18us; 35us; 93us; 36us; 92us; 37us; 91us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 10us; 16388us; 22us; 41us; 23us; 50us; 24us; 48us; 26us; 74us; 27us; 34us; 28us; 22us; 34us; 18us; 35us; 93us; 36us; 92us; 37us; 91us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 1us; 32768us; 34us; 14us; 1us; 32768us; 1us; 15us; 5us; 32768us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 1us; 16429us; 2us; 17us; 0us; 16396us; 1us; 32768us; 1us; 19us; 5us; 32768us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 1us; 16429us; 2us; 21us; 0us; 16397us; 1us; 32768us; 4us; 23us; 5us; 32768us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 1us; 16429us; 3us; 25us; 1us; 32768us; 30us; 26us; 1us; 32768us; 6us; 27us; 10us; 32768us; 22us; 41us; 23us; 50us; 24us; 48us; 26us; 74us; 27us; 34us; 28us; 22us; 34us; 18us; 35us; 93us; 36us; 92us; 37us; 91us; 1us; 32768us; 5us; 29us; 1us; 16399us; 29us; 30us; 1us; 32768us; 6us; 31us; 10us; 32768us; 22us; 41us; 23us; 50us; 24us; 48us; 26us; 74us; 27us; 34us; 28us; 22us; 34us; 18us; 35us; 93us; 36us; 92us; 37us; 91us; 1us; 32768us; 5us; 33us; 0us; 16398us; 1us; 32768us; 4us; 35us; 5us; 32768us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 1us; 16429us; 3us; 37us; 1us; 32768us; 6us; 38us; 10us; 32768us; 22us; 41us; 23us; 50us; 24us; 48us; 26us; 74us; 27us; 34us; 28us; 22us; 34us; 18us; 35us; 93us; 36us; 92us; 37us; 91us; 1us; 32768us; 5us; 40us; 0us; 16400us; 2us; 32768us; 21us; 44us; 33us; 42us; 2us; 32768us; 23us; 50us; 24us; 48us; 0us; 16401us; 1us; 32768us; 33us; 45us; 2us; 32768us; 23us; 50us; 24us; 48us; 0us; 16402us; 0us; 16403us; 3us; 32768us; 4us; 54us; 33us; 63us; 34us; 61us; 0us; 16404us; 3us; 32768us; 4us; 54us; 33us; 63us; 34us; 61us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 2us; 32768us; 33us; 58us; 34us; 55us; 1us; 32768us; 3us; 56us; 1us; 32768us; 2us; 57us; 0us; 16408us; 1us; 32768us; 3us; 59us; 1us; 32768us; 2us; 60us; 0us; 16409us; 1us; 32768us; 2us; 62us; 0us; 16410us; 1us; 32768us; 2us; 64us; 0us; 16411us; 1us; 32768us; 34us; 66us; 0us; 16412us; 1us; 16413us; 7us; 68us; 3us; 32768us; 35us; 93us; 36us; 92us; 37us; 91us; 0us; 16414us; 4us; 32768us; 3us; 73us; 35us; 93us; 36us; 92us; 37us; 91us; 1us; 32768us; 3us; 72us; 0us; 16415us; 0us; 16416us; 3us; 32768us; 35us; 93us; 36us; 92us; 37us; 91us; 1us; 32768us; 34us; 76us; 1us; 32768us; 4us; 70us; 1us; 32768us; 6us; 78us; 11us; 32768us; 22us; 41us; 23us; 50us; 24us; 48us; 25us; 84us; 26us; 74us; 27us; 34us; 28us; 22us; 34us; 18us; 35us; 93us; 36us; 92us; 37us; 91us; 1us; 32768us; 25us; 84us; 1us; 32768us; 5us; 81us; 0us; 16417us; 1us; 32768us; 5us; 83us; 0us; 16418us; 5us; 32768us; 4us; 85us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 5us; 32768us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 1us; 16429us; 3us; 87us; 1us; 16428us; 2us; 88us; 0us; 16419us; 1us; 16429us; 2us; 90us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 1us; 16426us; 4us; 123us; 0us; 16427us; 5us; 32768us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 1us; 16429us; 3us; 100us; 0us; 16428us; 0us; 16429us; 1us; 16429us; 7us; 121us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 11us; 32768us; 8us; 109us; 9us; 108us; 10us; 107us; 11us; 116us; 12us; 106us; 13us; 114us; 14us; 115us; 15us; 111us; 16us; 110us; 17us; 112us; 18us; 113us; 11us; 16444us; 8us; 109us; 9us; 108us; 10us; 107us; 11us; 116us; 12us; 106us; 13us; 114us; 14us; 115us; 15us; 111us; 16us; 110us; 17us; 112us; 18us; 113us; 11us; 16445us; 8us; 109us; 9us; 108us; 10us; 107us; 11us; 116us; 12us; 106us; 13us; 114us; 14us; 115us; 15us; 111us; 16us; 110us; 17us; 112us; 18us; 113us; 5us; 32768us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 5us; 32768us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 0us; 16446us; 6us; 32768us; 3us; 124us; 4us; 98us; 31us; 104us; 32us; 105us; 33us; 103us; 34us; 96us; 0us; 16447us; 1us; 32768us; 3us; 126us; 0us; 16448us; 0us; 16449us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 14us; 15us; 16us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 36us; 38us; 44us; 46us; 47us; 49us; 55us; 57us; 58us; 60us; 66us; 68us; 70us; 72us; 83us; 85us; 87us; 89us; 100us; 102us; 103us; 105us; 111us; 113us; 115us; 126us; 128us; 129us; 132us; 135us; 136us; 138us; 141us; 142us; 143us; 147us; 148us; 152us; 153us; 154us; 155us; 158us; 160us; 162us; 163us; 165us; 167us; 168us; 170us; 171us; 173us; 174us; 176us; 177us; 179us; 183us; 184us; 189us; 191us; 192us; 193us; 197us; 199us; 201us; 203us; 215us; 217us; 219us; 220us; 222us; 223us; 229us; 235us; 237us; 239us; 240us; 242us; 243us; 244us; 245us; 246us; 247us; 248us; 250us; 251us; 257us; 259us; 260us; 261us; 263us; 264us; 265us; 266us; 267us; 268us; 269us; 270us; 271us; 272us; 273us; 274us; 275us; 276us; 277us; 289us; 301us; 313us; 319us; 325us; 326us; 333us; 334us; 336us; 337us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 5us; 4us; 12us; 8us; 7us; 3us; 4us; 1us; 2us; 2us; 1us; 1us; 4us; 4us; 2us; 2us; 2us; 1us; 3us; 3us; 2us; 8us; 7us; 5us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 2us; 3us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 7us; 8us; 9us; 9us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 19us; 20us; 20us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 24us; 25us; 25us; 26us; 26us; 27us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 65535us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 16403us; 65535us; 16404us; 65535us; 16405us; 16406us; 16407us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 16411us; 65535us; 16412us; 65535us; 65535us; 16414us; 65535us; 65535us; 16415us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 16420us; 16421us; 16422us; 16423us; 16424us; 16425us; 65535us; 16427us; 65535us; 65535us; 16428us; 16429us; 65535us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 16439us; 16440us; 16441us; 16442us; 16443us; 65535us; 65535us; 65535us; 65535us; 65535us; 16446us; 65535us; 16447us; 65535us; 16448us; 16449us; |]
let _fsyacc_reductions ()  =    [| 
# 380 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 389 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "program-logic/lexer-parser-rules/Parser.fsy"
                                   _1 
                   )
# 51 "program-logic/lexer-parser-rules/Parser.fsy"
                 : Statement list));
# 400 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           List.empty 
                   )
# 54 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'prog));
# 410 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           _1 
                   )
# 55 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'prog));
# 421 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           [_1] 
                   )
# 58 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'statements));
# 432 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           _1 :: _2 
                   )
# 59 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'statements));
# 444 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newVarAssignment)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           NewVarAssignment _1 
                   )
# 62 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'statement));
# 455 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'existingVarAssignment)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           ExistingVarAssignment _1 
                   )
# 63 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'statement));
# 466 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifCond)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           If _1 
                   )
# 64 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'statement));
# 477 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whileLoop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           While _1 
                   )
# 65 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'statement));
# 488 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'print)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           Print _1 
                   )
# 66 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'statement));
# 499 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'func)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "program-logic/lexer-parser-rules/Parser.fsy"
                                                           Function _1 
                   )
# 67 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'statement));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'vartype)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "program-logic/lexer-parser-rules/Parser.fsy"
                              { vartype = _1; identifier = _2; value = _4 }
                   )
# 71 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'newVarAssignment));
# 523 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "program-logic/lexer-parser-rules/Parser.fsy"
                              { identifier = _1; value = _3}
                   )
# 75 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'existingVarAssignment));
# 535 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "program-logic/lexer-parser-rules/Parser.fsy"
                              { condition = _3; trueBranch = _7; falseBranch = _11 }
                   )
# 80 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'ifCond));
# 548 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "program-logic/lexer-parser-rules/Parser.fsy"
                              { condition = _3; trueBranch = _7; falseBranch = [] }
                   )
# 83 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'ifCond));
# 560 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "program-logic/lexer-parser-rules/Parser.fsy"
                              { condition = _3; body = _6 }
                   )
# 87 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'whileLoop));
# 572 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'printType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "program-logic/lexer-parser-rules/Parser.fsy"
                                                              { path = _2; printType = _3; overwrite = false }
                   )
# 90 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'printFile));
# 584 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'printType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "program-logic/lexer-parser-rules/Parser.fsy"
                                                              { path = _3; printType = _4; overwrite = true }
                   )
# 91 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'printFile));
# 596 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'printType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "program-logic/lexer-parser-rules/Parser.fsy"
                                                       PrintConsole _1 
                   )
# 93 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'printConsole));
# 607 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'text)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "program-logic/lexer-parser-rules/Parser.fsy"
                                                   PrintSingle _2 
                   )
# 96 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'printType));
# 618 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'text)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "program-logic/lexer-parser-rules/Parser.fsy"
                                                   PrintLine _2 
                   )
# 97 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'printType));
# 629 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'printFile)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "program-logic/lexer-parser-rules/Parser.fsy"
                                           PrintFile _1 
                   )
# 100 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'print));
# 640 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'printConsole)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "program-logic/lexer-parser-rules/Parser.fsy"
                                           _1 
                   )
# 101 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'print));
# 651 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                             Variable _2 
                   )
# 104 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'text));
# 662 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                             Message _2 
                   )
# 105 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'text));
# 673 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                             Variable _1 
                   )
# 106 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'text));
# 684 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                             Message _1 
                   )
# 107 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'text));
# 695 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'vartype)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "program-logic/lexer-parser-rules/Parser.fsy"
                                                  { vartype = _1; identifier = _2 }
                   )
# 109 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funArg));
# 707 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'funArg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "program-logic/lexer-parser-rules/Parser.fsy"
                                                   [_1] 
                   )
# 112 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funArgs));
# 718 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'funArg)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'funArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "program-logic/lexer-parser-rules/Parser.fsy"
                                                   _1 :: _3 
                   )
# 113 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funArgs));
# 730 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'funArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "program-logic/lexer-parser-rules/Parser.fsy"
                                                               _2 
                   )
# 116 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funArgsInParens));
# 741 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "program-logic/lexer-parser-rules/Parser.fsy"
                                                               [] 
                   )
# 117 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funArgsInParens));
# 751 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'vartype)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'funArgsInParens)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'returnS)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "program-logic/lexer-parser-rules/Parser.fsy"
                                  { ``type`` = _2; name = _3; args = _4; body = _6; toReturn = _7 }
                   )
# 122 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'func));
# 766 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'vartype)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'funArgsInParens)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'returnS)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "program-logic/lexer-parser-rules/Parser.fsy"
                                  { ``type`` = _2; name = _3; args = _4; body = []; toReturn = _6 }
                   )
# 125 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'func));
# 780 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                                   _3 
                   )
# 128 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'returnS));
# 791 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                                   _2 
                   )
# 129 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'returnS));
# 802 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Int 
                   )
# 132 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'vartype));
# 812 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Str 
                   )
# 133 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'vartype));
# 822 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Bool 
                   )
# 134 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'vartype));
# 832 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Value _1 
                   )
# 137 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'expression));
# 843 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'operation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Expression _1 
                   )
# 138 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'expression));
# 854 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Identifier _1 
                   )
# 139 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'expression));
# 865 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'functionCall)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "program-logic/lexer-parser-rules/Parser.fsy"
                                           FunctionCall _1 
                   )
# 140 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'expression));
# 876 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                   _2 
                   )
# 143 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'expressionInParens));
# 887 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                   _1 
                   )
# 144 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'expressionInParens));
# 898 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Value.String _1 
                   )
# 147 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'value));
# 909 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Value.Boolean _1 
                   )
# 148 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'value));
# 920 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Number _1 
                   )
# 149 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'value));
# 931 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Add 
                   )
# 152 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 941 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                               Subtract 
                   )
# 152 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 951 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Divide 
                   )
# 153 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 961 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                               Multiply 
                   )
# 153 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 971 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "program-logic/lexer-parser-rules/Parser.fsy"
                                           LogicalOr 
                   )
# 154 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 981 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                               LogicalAnd 
                   )
# 154 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 991 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Equals 
                   )
# 155 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 1001 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                               NotEqual 
                   )
# 155 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 1011 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "program-logic/lexer-parser-rules/Parser.fsy"
                                           MoreThan 
                   )
# 156 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 1021 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                               LessThan 
                   )
# 156 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 1031 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "program-logic/lexer-parser-rules/Parser.fsy"
                                           Append 
                   )
# 157 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operator));
# 1041 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionInParens)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'operator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionInParens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "program-logic/lexer-parser-rules/Parser.fsy"
                              { op = _2; left = _1; right = _3 }
                   )
# 161 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'operation));
# 1054 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionInParens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                               [_1] 
                   )
# 164 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funcCallArgs));
# 1065 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'funcCallArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                          _1 :: _3 
                   )
# 165 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funcCallArgs));
# 1077 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                               [] 
                   )
# 168 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funcCallArgsInParens));
# 1087 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'funcCallArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "program-logic/lexer-parser-rules/Parser.fsy"
                                                                               _2 
                   )
# 169 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'funcCallArgsInParens));
# 1098 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'funcCallArgsInParens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "program-logic/lexer-parser-rules/Parser.fsy"
                                                          { identifier = _1; arguments = _2 }
                   )
# 172 "program-logic/lexer-parser-rules/Parser.fsy"
                 : 'functionCall));
|]
# 1111 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 41;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Statement list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
