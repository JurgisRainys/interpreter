// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "lexer-parser-rules/Parser.fsy"

	open interpreter

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | ASSIGNMENT
  | SEMICOLON
  | RIGHT_PARENS
  | LEFT_PARENS
  | CLOSE_BLOCK
  | OPEN_BLOCK
  | COMMA
  | MULTIPLY
  | DIVIDE
  | SUBTRACT
  | ADD
  | MORE_THAN
  | LESS_THAN
  | LOGICAL_AND
  | LOGICAL_OR
  | EQUALS
  | NOT_EQUAL
  | PRINT
  | RETURN
  | FUN
  | WHILE
  | IF
  | ELSE
  | THEN
  | STRING of (string)
  | IDENTIFIER of (string)
  | BOOL
  | STR
  | INT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ASSIGNMENT
    | TOKEN_SEMICOLON
    | TOKEN_RIGHT_PARENS
    | TOKEN_LEFT_PARENS
    | TOKEN_CLOSE_BLOCK
    | TOKEN_OPEN_BLOCK
    | TOKEN_COMMA
    | TOKEN_MULTIPLY
    | TOKEN_DIVIDE
    | TOKEN_SUBTRACT
    | TOKEN_ADD
    | TOKEN_MORE_THAN
    | TOKEN_LESS_THAN
    | TOKEN_LOGICAL_AND
    | TOKEN_LOGICAL_OR
    | TOKEN_EQUALS
    | TOKEN_NOT_EQUAL
    | TOKEN_PRINT
    | TOKEN_RETURN
    | TOKEN_FUN
    | TOKEN_WHILE
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_STRING
    | TOKEN_IDENTIFIER
    | TOKEN_BOOL
    | TOKEN_STR
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_statement
    | NONTERM_vartype

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | ASSIGNMENT  -> 1 
  | SEMICOLON  -> 2 
  | RIGHT_PARENS  -> 3 
  | LEFT_PARENS  -> 4 
  | CLOSE_BLOCK  -> 5 
  | OPEN_BLOCK  -> 6 
  | COMMA  -> 7 
  | MULTIPLY  -> 8 
  | DIVIDE  -> 9 
  | SUBTRACT  -> 10 
  | ADD  -> 11 
  | MORE_THAN  -> 12 
  | LESS_THAN  -> 13 
  | LOGICAL_AND  -> 14 
  | LOGICAL_OR  -> 15 
  | EQUALS  -> 16 
  | NOT_EQUAL  -> 17 
  | PRINT  -> 18 
  | RETURN  -> 19 
  | FUN  -> 20 
  | WHILE  -> 21 
  | IF  -> 22 
  | ELSE  -> 23 
  | THEN  -> 24 
  | STRING _ -> 25 
  | IDENTIFIER _ -> 26 
  | BOOL  -> 27 
  | STR  -> 28 
  | INT  -> 29 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_ASSIGNMENT 
  | 2 -> TOKEN_SEMICOLON 
  | 3 -> TOKEN_RIGHT_PARENS 
  | 4 -> TOKEN_LEFT_PARENS 
  | 5 -> TOKEN_CLOSE_BLOCK 
  | 6 -> TOKEN_OPEN_BLOCK 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_MULTIPLY 
  | 9 -> TOKEN_DIVIDE 
  | 10 -> TOKEN_SUBTRACT 
  | 11 -> TOKEN_ADD 
  | 12 -> TOKEN_MORE_THAN 
  | 13 -> TOKEN_LESS_THAN 
  | 14 -> TOKEN_LOGICAL_AND 
  | 15 -> TOKEN_LOGICAL_OR 
  | 16 -> TOKEN_EQUALS 
  | 17 -> TOKEN_NOT_EQUAL 
  | 18 -> TOKEN_PRINT 
  | 19 -> TOKEN_RETURN 
  | 20 -> TOKEN_FUN 
  | 21 -> TOKEN_WHILE 
  | 22 -> TOKEN_IF 
  | 23 -> TOKEN_ELSE 
  | 24 -> TOKEN_THEN 
  | 25 -> TOKEN_STRING 
  | 26 -> TOKEN_IDENTIFIER 
  | 27 -> TOKEN_BOOL 
  | 28 -> TOKEN_STR 
  | 29 -> TOKEN_INT 
  | 32 -> TOKEN_end_of_input
  | 30 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_statement 
    | 5 -> NONTERM_vartype 
    | 6 -> NONTERM_vartype 
    | 7 -> NONTERM_vartype 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 32 
let _fsyacc_tagOfErrorTerminal = 30

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | ASSIGNMENT  -> "ASSIGNMENT" 
  | SEMICOLON  -> "SEMICOLON" 
  | RIGHT_PARENS  -> "RIGHT_PARENS" 
  | LEFT_PARENS  -> "LEFT_PARENS" 
  | CLOSE_BLOCK  -> "CLOSE_BLOCK" 
  | OPEN_BLOCK  -> "OPEN_BLOCK" 
  | COMMA  -> "COMMA" 
  | MULTIPLY  -> "MULTIPLY" 
  | DIVIDE  -> "DIVIDE" 
  | SUBTRACT  -> "SUBTRACT" 
  | ADD  -> "ADD" 
  | MORE_THAN  -> "MORE_THAN" 
  | LESS_THAN  -> "LESS_THAN" 
  | LOGICAL_AND  -> "LOGICAL_AND" 
  | LOGICAL_OR  -> "LOGICAL_OR" 
  | EQUALS  -> "EQUALS" 
  | NOT_EQUAL  -> "NOT_EQUAL" 
  | PRINT  -> "PRINT" 
  | RETURN  -> "RETURN" 
  | FUN  -> "FUN" 
  | WHILE  -> "WHILE" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | THEN  -> "THEN" 
  | STRING _ -> "STRING" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | BOOL  -> "BOOL" 
  | STR  -> "STR" 
  | INT  -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | ASSIGNMENT  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | RIGHT_PARENS  -> (null : System.Object) 
  | LEFT_PARENS  -> (null : System.Object) 
  | CLOSE_BLOCK  -> (null : System.Object) 
  | OPEN_BLOCK  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MULTIPLY  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | SUBTRACT  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | MORE_THAN  -> (null : System.Object) 
  | LESS_THAN  -> (null : System.Object) 
  | LOGICAL_AND  -> (null : System.Object) 
  | LOGICAL_OR  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | NOT_EQUAL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL  -> (null : System.Object) 
  | STR  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 4us; 1us; 65535us; 0us; 5us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; |]
let _fsyacc_action_rows = 9
let _fsyacc_actionTableElements = [|4us; 32768us; 0us; 3us; 27us; 8us; 28us; 7us; 29us; 6us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 16391us; |]
let _fsyacc_reductions ()  =    [| 
# 250 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : interpreter.AST option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 259 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "lexer-parser-rules/Parser.fsy"
                                   _1 
                   )
# 42 "lexer-parser-rules/Parser.fsy"
                 : interpreter.AST option));
# 270 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "lexer-parser-rules/Parser.fsy"
                              None 
                   )
# 45 "lexer-parser-rules/Parser.fsy"
                 : 'prog));
# 280 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "lexer-parser-rules/Parser.fsy"
                                    Some _1 
                   )
# 46 "lexer-parser-rules/Parser.fsy"
                 : 'prog));
# 291 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'vartype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "lexer-parser-rules/Parser.fsy"
                                  Vart _1 
                   )
# 50 "lexer-parser-rules/Parser.fsy"
                 : 'statement));
# 302 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "lexer-parser-rules/Parser.fsy"
                              INT 
                   )
# 53 "lexer-parser-rules/Parser.fsy"
                 : 'vartype));
# 312 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "lexer-parser-rules/Parser.fsy"
                              STR 
                   )
# 54 "lexer-parser-rules/Parser.fsy"
                 : 'vartype));
# 322 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "lexer-parser-rules/Parser.fsy"
                               BOOL 
                   )
# 55 "lexer-parser-rules/Parser.fsy"
                 : 'vartype));
|]
# 333 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 33;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : interpreter.AST option =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
